# file      : tests/cfg-create.testscript
# license   : MIT; see accompanying LICENSE file

.include common.testscript

config_cxx = config.cxx=$quote($recall($cxx.path) $cxx.config.mode, true)

cfg_create += 2>!

# @@ To verify the creation result use cfg-list command rather than
#    pkg-status, when implemented.
#
pkg_status += -d cfg

: non-empty
:
$* 2>>/~%EOE% != 0
error: directory ./ is not empty
  info: use --wipe to clean it up but be careful
EOE

: dir
:
{
  test.arguments += -d cfg
  test.cleanups  += &cfg/***

  : no-vars-mods
  :
  {
    $* 2>>/~%EOE%;
      %created new configuration in .+/cfg/%
      %  info: uuid: .{36}%
        info: type: target
      EOE

    $pkg_status libfoo >'libfoo unknown'
  }

  : conf-var
  :
  {
    $* "config.install.root='$~/opt'" 2>>/~%EOE%;
      %created new configuration in .+/cfg/%
      %  info: uuid: .{36}%
        info: type: target
      EOE

    $pkg_status libfoo >'libfoo unknown';

    cat cfg/build/config.build >>/~"%EOO%"
      %.+
      %config.install.root = '?.+/opt/'?%
      %.+
      EOO
  }

  : module
  :
  {
    $* cxx $config_cxx 2>>/~%EOE%;
      %created new configuration in .+/cfg/%
      %  info: uuid: .{36}%
        info: type: target
      EOE

    $pkg_status libfoo >'libfoo unknown';

    cat cfg/build/config.build >>/~"%EOO%"
      %.+
      %config.cxx = .+%
      %.+
      EOO
  }

  : wipe
  :
  {
    mkdir -p cfg/foo/bar &!cfg/ &!cfg/foo/ &!cfg/foo/bar/;

    $* --wipe 2>>/~%EOE%;
      %created new configuration in .+/cfg/%
      %  info: uuid: .{36}%
        info: type: target
      EOE

    $pkg_status libfoo >'libfoo unknown'
  }

  : existing
  :
  {
    $build 'create(cfg/,cc)' $config_cxx 2>!;

    $* --existing 2>>/~%EOE%;
      %initialized existing configuration in .+/cfg/%
      %  info: uuid: .{36}%
        info: type: target
      EOE

    $pkg_status libfoo >'libfoo unknown'
  }
}

: name
:
{
  test.arguments += -d cfg

  : valid
  :
  {
    $* --name foo 2>>/~%EOE% &cfg/***;
      %created new configuration in .+/cfg/%
      %  info: uuid: .{36}%
        info: type: target
        info: name: foo
      EOE

    # @@ To verify the result use cfg-list, when implemented.
    #
    $pkg_status libfoo >'libfoo unknown'
  }

  : invalid
  :
  : Also use the short option.
  :
  $* --name 123 2>>EOE != 0
    error: invalid --name option value '123': illegal first character (must be alphabetic or underscore)
    EOE
}

: type
:
{
  test.arguments += -d cfg

  : valid
  :
  {
    $* --type host 2>>/~%EOE% &cfg/***;
      %created new configuration in .+/cfg/%
      %  info: uuid: .{36}%
        info: type: host
      EOE

    $pkg_status libfoo >'libfoo unknown'
  }

  : invalid
  :
  : Also use the short option.
  :
  $* --type '' 2>>EOE != 0
    error: empty --type option value
    EOE
}

: uuid
:
{
  test.arguments += -d cfg

  : valid
  :
  {
    $* --config-uuid '18f48b4b-b5d9-4712-b98c-1930df1c4228' 2>>/~%EOE% &cfg/***;
      %created new configuration in .+/cfg/%
        info: uuid: 18f48b4b-b5d9-4712-b98c-1930df1c4228
        info: type: target
      EOE

    $pkg_status libfoo >'libfoo unknown'
  }

  : invalid
  :
  : Also use the short option.
  :
  $* --config-uuid '123' 2>>EOE != 0
    error: invalid value '123' for option '--config-uuid'
    EOE
}

: associate-host-config
:
{
  test.arguments += -d cfg

  : valid-type
  :
  {
    $cfg_create -d host --type 'host' &host/***;

    $* --host-config host 2>>/~%EOE% &cfg/***;
      %created new configuration in .+/cfg/%
      %  info: uuid: .{36}%
        info: type: target
      EOE

    $pkg_status libfoo >'libfoo unknown'
  }

  : invalid-type
  :
  {
    $cfg_create -d host &host/***;

    $* --host-config host 2>>/~%EOE% != 0
      %error: host configuration .+/host/ is of 'target' type%
      EOE
  }
}
