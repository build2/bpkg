# file      : tests/remote-git.testscript
# copyright : Copyright (c) 2014-2018 Code Synthesis Ltd
# license   : MIT; see accompanying LICENSE file

# Tests for commands that accept git repository location must be able to run
# regardless whether the repository is local or remote. They also must be able
# to create the repository used for testing at the specified path, so being
# published to build2.org it can be used for the remote testing. Note that
# prior to publishing repositories tests must be performed with the
# config.test.output=keep variable override, so their working directories (that
# contain repositories produced) are not cleaned up.
#

# Check that git version is the minimum supported one (2.14.0) or above (see
# bpkg/fetch-git.cxx for details).
#
+git --version | set git_version_out

+echo "$git_version_out" | sed -n -e 's/git version (\d+\.\d+\.\d+).*/\1/p' | \
 set git_version

+if ("$git_version" == "")
  exit "unable to obtain git version from '$git_version_out'"
end

+echo "$git_version" | sed -e 's/(\d+).*/\1/'      | set git_version_major
+echo "$git_version" | sed -e 's/\d+\.(\d+).*/\1/' | set git_version_minor

# These flags must be used by testscripts to decide if they should skip git
# repository-related tests. See bpkg/fetch-git.cxx for the functionality
# reduction details for partially supported git versions.
#
git_supported = ($git_version_major >  2 || \
                 $git_version_major == 2 && $git_version_minor >= 11)

git_fully_supported = ($git_version_major >  2 || \
                       $git_version_major == 2 && $git_version_minor >= 14)

# Output directory path that testscripts must use to prepare repositories
# required by tests they contain.
#
out_git = $canonicalize([dir_path] $~/git/$cmd)

# If $remote is true then remote repository locations must be used for tests.
#
remote = $config.bpkg.test.remote

+if ($remote != true)
  rep_git_local = ($cxx.target.class != 'windows' \
                   ? "file://$out_git" \
                   : "file:/$regex.replace($out_git, '\\', '/')")

  rep_git = $rep_git_local # Default local repository URL.

  mkdir -p $out_git
else
  # If $git_ssh is not true then testscripts must skip tests that use the ssh
  # protocol. Otherwise, it is assumed that the password-less ssh
  # authentication is arranged for git.build2.org.
  #
  git_ssh = $config.bpkg.test.git.ssh

  rep_git_https_dumb        = "https://build2.org/bpkg/git/$cmd"
  rep_git_https_smart       = "https://git.build2.org/testing/bpkg/advonly/$cmd"
  rep_git_https_smart_unadv = "https://git.build2.org/testing/bpkg/unadv/$cmd"
  rep_git_git               = "git://git.build2.org/testing/bpkg/unadv/$cmd"
  rep_git_ssh               = "ssh://git.build2.org/var/scm/testing/bpkg/unadv/$cmd"

  rep_git = $rep_git_https_dumb # Default remote repository URL.
end

# Command for extracting the git repository from a tarball into the output
# directory (see above).
#
# Note that we can expect that the tar program is present on the platform. We
# will use the same options as we do for unpacking of package archives (see
# pkg-unpack.cxx).
#
git_extract = ($cxx.target.class != 'windows' \
               ? tar -C $out_git -xf \
               : tar -C $regex.replace($out_git, '\\', '/') --force-local -xf)
