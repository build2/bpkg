// file      : bpkg/utility -*- C++ -*-
// copyright : Copyright (c) 2014-2015 Code Synthesis Ltd
// license   : MIT; see accompanying LICENSE file

#ifndef BPKG_UTILITY
#define BPKG_UTILITY

#include <utility>   // move()
#include <exception> // uncaught_exception ()

#include <bpkg/types>

namespace bpkg
{
  using std::move;

  // Filesystem.
  //
  bool
  exists (const path&);

  bool
  exists (const dir_path&);

  bool
  empty (const dir_path&);

  void
  mk (const dir_path&);

  void
  mk_p (const dir_path&);

  void
  rm (const path&);

  void
  rm_r (const dir_path&, bool dir = true);

  // Process.
  //
  // The process command line is printed for verbosity >= 2 (essential
  // command lines).
  //
  void
  run (const char* const args[]);

  inline void
  run (const cstrings& args) {run (args.data ());}

  // Run build2, mapping verbosity levels.
  //
  void
  run_b (const string& buildspec, const strings& vars = strings ());

  // Call a function if there is an exception.
  //

  // True means we are in the body of a destructor that is being
  // called as part of the exception stack unwindining. Used to
  // compensate for the deficiencies of uncaught_exception() until
  // C++17 uncaught_exceptions() becomes available.
  //
  // @@ MT: will have to be TLS.
  //
  extern bool exception_unwinding_dtor;

  template <typename F>
  struct exception_guard;

  template <typename F>
  inline exception_guard<F>
  make_exception_guard (F f)
  {
    return exception_guard<F> (std::move (f));
  }

  template <typename F>
  struct exception_guard
  {
    exception_guard (F f): f_ (std::move (f)) {}
    ~exception_guard ()
    {
      if (std::uncaught_exception ())
      {
        exception_unwinding_dtor = true;
        f_ ();
        exception_unwinding_dtor = false;
      }
    }

  private:
    F f_;
  };
}

#endif // BPKG_UTILITY
